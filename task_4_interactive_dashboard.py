# -*- coding: utf-8 -*-
"""Task 4-Interactive Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yP4bfnubkoNrDtGaAQ4swANEntUI-Cji
"""

!pip install dash

import dash
from dash import dcc, html
import plotly.express as px
import pandas as pd

# Load dataset
url = "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv"
df = pd.read_csv(url)

# Create Dash app
app = dash.Dash(__name__)

# Layout
app.layout = html.Div([
    html.H1("Iris Dataset Dashboard"),
    html.Label("Select Species:"),
    dcc.Dropdown(
        id='species-dropdown',
        options=[{'label': s, 'value': s} for s in df['species'].unique()],
        value='setosa'
    ),
    html.Label("Select Sepal Width Range:"),
    dcc.RangeSlider(
        id='sepal-width-slider',
        min=df['sepal_width'].min(),
        max=df['sepal_width'].max(),
        step=0.1,
        value=[df['sepal_width'].min(), df['sepal_width'].max()],
        marks={i: str(i) for i in range(int(df['sepal_width'].min()), int(df['sepal_width'].max()) + 1)}
    ),
    html.Label("Select X-axis variable for Scatter Plot:"),
    dcc.Dropdown(
        id='scatter-xaxis-dropdown',
        options=[{'label': col.replace('_', ' ').title(), 'value': col} for col in df.columns if df[col].dtype in ['int64', 'float64']],
        value='sepal_width'
    ),
    dcc.Graph(id='scatter-plot'),
    html.Label("Select Feature for Histogram:"),
    dcc.Dropdown(
        id='histogram-feature-dropdown',
        options=[{'label': col.replace('_', ' ').title(), 'value': col} for col in df.columns if df[col].dtype in ['int64', 'float64']],
        value='sepal_length'
    ),
    dcc.Graph(id='histogram-plot')
])

# Callback for Scatter Plot
@app.callback(
    dash.dependencies.Output('scatter-plot', 'figure'),
    [dash.dependencies.Input('species-dropdown', 'value'),
     dash.dependencies.Input('sepal-width-slider', 'value'),
     dash.dependencies.Input('scatter-xaxis-dropdown', 'value')]
)
def update_scatter_plot(selected_species, sepal_width_range, selected_xaxis):
    filtered_df = df[
        (df['species'] == selected_species) &
        (df['sepal_width'] >= sepal_width_range[0]) &
        (df['sepal_width'] <= sepal_width_range[1])
    ]
    fig = px.scatter(filtered_df, x=selected_xaxis, y='sepal_length', color='species')
    return fig

# Callback for Histogram
@app.callback(
    dash.dependencies.Output('histogram-plot', 'figure'),
    [dash.dependencies.Input('species-dropdown', 'value'),
     dash.dependencies.Input('sepal-width-slider', 'value'),
     dash.dependencies.Input('histogram-feature-dropdown', 'value')]
)
def update_histogram(selected_species, sepal_width_range, selected_feature):
    filtered_df = df[
        (df['species'] == selected_species) &
        (df['sepal_width'] >= sepal_width_range[0]) &
        (df['sepal_width'] <= sepal_width_range[1])
    ]
    fig = px.histogram(filtered_df, x=selected_feature, color='species')
    return fig


# Run app (this will not render in Colab directly)
app.run(mode='inline')  # Only works if using Colab extensions